package cars.com;
dialect "mvel"

import cars.com.Car
import cars.com.CarCategory
import org.joda.time.Days;

rule "init"
when
then
    insert(new Car(CarCategory.CATEGORY.A));
    insert(new Car(CarCategory.CATEGORY.A));
    insert(new Car(CarCategory.CATEGORY.B));
    insert(new Car(CarCategory.CATEGORY.D));
    insert(new Car(CarCategory.CATEGORY.D));
end
rule "set_preference"
salience(-rental.getRentalStart().getMillis()+1)
    when
    rental : Rental(categoryPrefernce == null);
    then
    System.out.println("Ustalamy preferencję na A klientowi: "+rental.getClient().getId());
    modify(rental){ categoryPrefernce=CarCategory.CATEGORY.A,categoryGot=CarCategory.CATEGORY.A}
end
rule "rent"
salience(-rental.getRentalStart().getMillis())
 when
    rental : Rental(client.getCar() == null);
    car : Car(available && carCategory == rental.categoryGot);
 then
    car.setAvailable(false);
    System.out.println("Wypozyczammy samochód: "+ car.carCategory + " klientowi: "+ rental.getClient().getId());
    car.addRental(rental);
    rental.getClient().setCar(car);
    retract(rental);
end
rule "changePreferencesAB"
salience((-rental.getRentalStart().getMillis())-1)
when
    rental : Rental(categoryGot == CarCategory.CATEGORY.A  && client.getCar()==null);
 then
    System.out.println("Brak samochodu kat A");
    modify(rental){ categoryGot = CarCategory.CATEGORY.B}
end

rule "changePreferencesBD"
salience((-rental.getRentalStart().getMillis())-1)
when
    rental : Rental(categoryGot == CarCategory.CATEGORY.B && client.getCar()==null);
 then
   System.out.println("Brak samochodu kat B");
   modify(rental){categoryGot = CarCategory.CATEGORY.D}
end
rule "changePreferencesDNull"
salience((-rental.getRentalStart().getMillis())-1)
when
    rental : Rental(categoryGot == CarCategory.CATEGORY.A && client.getCar()==null);
 then
    System.out.println("Brak samochodu kat D");
    modify(rental){categoryGot = null}
end
rule "noCars"
salience((-rental.getRentalStart().getMillis())-1)
when
    rental : Rental(categoryGot == null)
   then
    System.out.println("Brak wybranego samochodu kat "+ rental.getCategoryGot() +" w wypozyczalni");
    retract(rental)
end

rule "hasCar"
salience((-rental.getRentalStart().getMillis())+1)
when
    rental : Rental(client.car!=null)
   then
    System.out.println("Klient już wypożyczył samochód");
    retract(rental)
end


rule "babyCarier"
no-loop
 when
    ret : Return(rental.wantBabyCarrier);
 then
    payment = ret.getRental().getCategoryGot().babyCarrierPrice ;
    ret.getRental().getClient().addPayment(payment);
    System.out.println(" + "+payment+" za fotelik");
  end
rule "bikeSupport"
no-loop
when
    ret : Return(rental.wantBikeSupport);
   then
    payment= ret.getRental().getCategoryGot().bikeSupportPrice;
    ret.getRental().getClient().addPayment(payment);
    System.out.println(" + " +payment+" za bagażnik");
  end
rule "getDiscount"
 when
    ret : Return(rental.client.isLoyaltyPartner && !rental.gotDiscount);
 then
    ret.getRental().getClient().addPayment(-10);
    System.out.println(" - 10 za prog lojalnościowy");
 end
rule "over3Days"
when
    ret : Return(Days.daysBetween(rental.getRentalStart(),ret.rental.getRentalPredictedDate()).getDays()+1 <= 3);
then
    int payment = ret.getKilometersDriven();
    ret.getRental().getClient().addPayment(payment);
    System.out.println(" + " +payment+" za km");
 end

rule "below3Days"
when
    ret : Return(Days.daysBetween(rental.getRentalStart(),ret.rental.getRentalPredictedDate()).getDays()+1 > 3);
then

    int payment = (int)Math.ceil(ret.getKilometersDriven() * 0.5f );
    ret.getRental().getClient().addPayment(payment);
    System.out.println(" + " +payment+" za km");
 end
rule "days"
when
ret : Return()
then
    int days = Days.daysBetween(ret.getRental().getRentalStart(),ret.getRental().getRentalPredictedDate()).getDays()+1;
    int oneDayCost =( days > 3 )?ret.getRental().getCategoryPrefernce().priceOver3Days:ret.getRental().getCategoryPrefernce().priceBelow3Days;
    int payment= days*oneDayCost;
    ret.getRental().getClient().addPayment(payment);
    System.out.println(" + " +payment+" za dni(" + days +"*" +oneDayCost+")");
 end
 rule "daysLate"
 when
 ret : Return(Days.daysBetween(rental.getRentalPredictedDate(),rentalEnd).getDays()>0)
 then
    int days = Days.daysBetween(ret.getRental().getRentalStart(),ret.getRental().getRentalPredictedDate()).getDays()+1;
    int oneDayCost =( days > 3 )?ret.getRental().getCategoryPrefernce().priceOver3Days:ret.getRental().getCategoryPrefernce().priceBelow3Days;
    daysLate = Days.daysBetween(ret.getRental().getRentalPredictedDate(),ret.getRentalEnd()).getDays();
    int payment=daysLate*3*oneDayCost;
    ret.getRental().getClient().addPayment(payment);
    System.out.println(" + " +payment+" za opóźnienie ("+daysLate+" dni)");
  end

   rule "lostBusby"
   when
   ret : Return(lostBusbyCount > 0)
   then
    payment= ret.getLostBusbyCount() * 20;
    ret.getRental().getClient().addPayment(payment);
    if(ret.getLostBusbyCount()>0) System.out.print(" + " +payment+" za kołpaki (il: "+ret.getLostBusbyCount()+")");
    end

   rule "lackOfRegistrationCertificate"
   when
   ret : Return(lackOfRegistrationCertificate)
   then
    payment= ret.getLackOfRegistrationCertificate()? 500 : 0;
    ret.getRental().getClient().addPayment(payment);
    if(ret.getLackOfRegistrationCertificate()) System.out.print(" + " +payment+" za dowód");
    end
rule "return"
salience(-ret.getRentalEnd().getMillis()-1)
 when
    ret : Return(rental.getClient().getCar() != null);
 then
    System.out.print("zwrot samochodu " + ret.getRental().getClient().getCar().getCarCategory() + " od klienta " + ret.getRental().getClient().getId() +":");
    Client client = ret.getRental().getClient();
    ret.getRental().setRentalEnd(ret.getRentalEnd());
    ret.getRental().getClient().getCar().setAvailable(true);
    client.setCar(null);
    System.out.println(" = rachunek klienta:" + client.getBill());
    retract(ret);
end

